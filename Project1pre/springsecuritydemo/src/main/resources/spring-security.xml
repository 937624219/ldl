<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置匿名访问资源 /pages ‘/’必须 -->
    <!--<security:http security="none" pattern="/pages/**"/>-->
    <security:http security="none" pattern="/login.html"/>

    <!--
        http：用于定义相关权限控制
        auto-config：是否自动配置
            设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出 处理等
            设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--
            intercept-url：定义一个拦截规则,可以定义多个规则
            pattern：对哪些url进行权限控制
            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
                请求的用户只需拥有其中的一个角色就能成功访问对应的URL
        -->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>

        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/index.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/pages/a.html" access="isAuthenticated()"/>
        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/pages/b.html" access="hasAuthority('add')"/>
        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/pages/c.html" access="hasRole('ROLE_ADMIN')"/>
        <!--拥有ROLE_ADMIN角色就可以访问d.html页面， 注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/pages/d.html" access="hasRole('ADMIN')"/>

        <!--
            使用自定义页面作为登录页面必须配置登录表单
            login-page="login.html":指定登录页面
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"
        />

        <!--
            csrf：对应CsrfFilter过滤器
            disable：是否关闭，如果是自定义登录页面需要关闭此选项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"/>

        <!--
            logout：退出登录
            logout-url：退出登录操作对应的请求路径
            logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout" logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>

    <!--authentication-manager：认证管理器，用于处理认证操作-->
    <security:authentication-manager>
        <!--authentication-provider：认证提供者，执行具体的认证逻辑-->
        <!--<security:authentication-provider>
            &lt;!&ndash;user-service：用于获取用户信息，提供给authentication-provider进行认证&ndash;&gt;
            <security:user-service>
                &lt;!&ndash;
                    user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询 用户信息
                    {noop}：表示当前使用的密码为明文
                &ndash;&gt;
                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}1234"/>
            </security:user-service>
        </security:authentication-provider>-->

        <!--从数据库查询,引用bean-->
        <security:authentication-provider user-service-ref="userService">
            <!--指定对密码加密的对象-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置了就会使用，明文会失效-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <bean id="userService" class="plus.ldl.security.UserService"/>

    <mvc:default-servlet-handler/>

    <!--开启sprig注解驱动-->
    <context:annotation-config/>

    <mvc:annotation-driven/>
    <context:component-scan base-package="plus.ldl.controller"/>

    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>

</beans>